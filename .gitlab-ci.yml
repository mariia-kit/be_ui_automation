image: gradle:6.7.1-jdk11

include: '.gitlab-ci-service.yml'


variables:
  ENV:
    value: "dev" # Deploy to dev by default
    description: "Run tests agains environment."
  CYCLE: "latest"
  #SPARK_URL: "https://outlook.office.com/webhook/6371821a-7221-4e98-bfaa-a6f309aa9fe6@8a68f26d-b270-4ef3-ae78-bd695a909445/IncomingWebhook/1bdcdbaeb9c648758f7a9676a239dfb5/d45cc121-c9d1-44d9-893d-51382613cf7a"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  IMAGE_TAG: ""
  SERVICE: ""
  WEBEX_URL: ""

stages:
  - test
  - instrumental
  - pages

.test_run:
  stage: test
  extends: .servisable
  script:
    - set GROOVY_TURN_OFF_JAVA_WARNINGS=true
    - if [ ! -z ${CM_TEST_BRANCH} ] && git branch -a | egrep "remotes/origin/${CM_TEST_BRANCH}"; then git checkout origin/${CM_TEST_BRANCH}; res=$?; fi
    - if [[ ! -z ${CM_TEST_BRANCH} && $res == 0 ]]; then echo "Running tests from ${CM_TEST_BRANCH} brach"; fi
    - mkdir -p "${REPORT_URL}"
    - chown gradle:gradle ./ -R
    - echo "gradle $TASK -Penv=$ENV -Pci=true -Ptest_cycle=$CYCLE -Pimage_tag=$IMAGE_TAG -Pservice=$SERVICE"
    - gradle $TASK -Penv=$ENV -Pci=true -Ptest_cycle=$CYCLE -Pimage_tag=$IMAGE_TAG -Pservice=$SERVICE
  after_script:
    - mkdir -p "${REPORT_URL}"
    - cp -TRv build/reports/allure-report/ "${REPORT_URL}/" > /dev/null
  artifacts:
    name: "Report"
    paths:
      - index.html
      - "${REPORT_URL}/"
      - build/allure-results/
    when: always
    reports:
      junit: build/test-results/**/TEST-*.xml
    expire_in: 1 week
  allow_failure: false

##################### COMMON #####################
# Create manual job for every CM & NS pipelines

test_e2e_auto:
  extends: .test_run
  rules:
    - if: $TASK_NS || $TASK_CM
      when: manual
    - when: never
  variables:
    TASK: "e2eTests"
    REPORT_URL: "build/reports_e2e"
    HISTORY_URL: "history_e2e"
  allow_failure: true

test_e2e_ui_auto:
  extends: .test_run
  rules:
    - if: $TASK_NS || $TASK_CM
      when: manual
    - when: never
  variables:
    TASK: "e2eTestsUI"
    REPORT_URL: "build/reports_e2e"
    HISTORY_URL: "history_e2e"
  allow_failure: true

##################### CM #####################

# Creates CM test job depending on task passed in TASK_CM variable
test_cm_auto:
  extends: .test_run
  rules:
    - if: $TASK_CM
      when: delayed
      start_in: 5 minutes
  variables:
    TASK: $TASK_CM
    REPORT_URL: "build/reports_cm"
    HISTORY_URL: "history_cm"

##################### MANUAL CM #####################

test_cm_smoke:
  extends: .test_run
  stage: test
  variables:
    REPORT_URL: "build/reports_cm"
    HISTORY_URL: "history_cm"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "dev"
      when: manual
      variables:
        TASK: "smokeCMTests"
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "sit"
      when: manual
      variables:
        TASK: "smokeCMTests"
    - when: never
  allow_failure: true

test_cm_regression:
  extends: .test_run
  stage: test
  variables:
    REPORT_URL: "build/reports_cm"
    HISTORY_URL: "history_cm"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "dev"
      when: manual
      variables:
        TASK: "devTests"
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "sit"
      when: manual
      variables:
        TASK: "sitTests"
    - when: never
  allow_failure: true

test_e2e:
  extends: .test_run
  stage: test
  variables:
    TASK: "e2eTests"
    REPORT_URL: "build/reports_e2e"
    HISTORY_URL: "history_e2e"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "dev"
      when: manual
      variables:
        TASK: "e2eTests"
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "sit"
      when: manual
      variables:
        TASK: "e2eTests"
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "prod"
      when: manual
      variables:
        TASK: "e2eProdTests"
    - when: never
  allow_failure: true

test_ui_dev:
  extends: .test_run
  stage: test
  variables:
    TASK: "uiTests"
    REPORT_URL: "build/reports_cm"
    HISTORY_URL: "history_cm"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "dev"
      when: manual
    - when: never
  allow_failure: true

test_e2e_ui_sit:
  extends: .test_run
  stage: test
  variables:
    TASK: "e2eTestsUI"
    REPORT_URL: "build/reports_e2e"
    HISTORY_URL: "history_e2e"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "sit"
      when: manual
    - when: never
  allow_failure: true

test_cm_prod:
  extends: .test_run
  stage: test
  variables:
    TASK: "prodTests"
    REPORT_URL: "build/reports_cm"
    HISTORY_URL: "history_cm"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "prod"
      when: manual
    - when: never
  allow_failure: true

##################### NS #####################

# Creates NS test job depending on task passed in TASK_NS variable
test_ns_auto:
  extends: .test_run
  rules:
    - if: $TASK_NS
      when: delayed
      start_in: 5 minutes
  variables:
    TASK: $TASK_NS
    REPORT_URL: "build/reports_ns"
    HISTORY_URL: "history_ns"

##################### MANUAL NS #####################

test_ns_smoke:
  extends: .test_run
  stage: test
  variables:
    REPORT_URL: "build/reports_ns"
    HISTORY_URL: "history_ns"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "dev"
      when: manual
      variables:
        TASK: "nsTestsSmoke"
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "sit"
      when: manual
      variables:
        TASK: "smokeCMTestssit"
    - when: never
  allow_failure: true

test_ns_regression:
  extends: .test_run
  stage: test
  variables:
    TASK: "nsTestRegression"
    REPORT_URL: "build/reports_ns"
    HISTORY_URL: "history_ns"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "dev"
      when: manual
      variables:
        TASK: "nsTestRegression"
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "sit"
      when: manual
      variables:
        TASK: "nsTestRegression"
    - when: never
  allow_failure: true

test_ns_prod:
  extends: .test_run
  stage: test
  variables:
    TASK: "nsTestProd"
    REPORT_URL: "build/reports_ns"
    HISTORY_URL: "history_ns"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "prod"
      when: manual
    - when: never
  allow_failure: true

##################### PROXY #####################

# Creates PROXY test job depending on task passed in TASK_PROXY variable
test_proxy_auto:
  extends: .test_run
  rules:
    - if: $TASK_PROXY
      when: delayed
      start_in: 5 minutes
  variables:
    TASK: $TASK_PROXY
    REPORT_URL: "build/reports_proxy"
    HISTORY_URL: "history_proxy"

##################### PROXY MANUAL #####################

test_proxy:
  extends: .test_run
  stage: test
  variables:
    REPORT_URL: "build/reports_proxy"
    HISTORY_URL: "history_proxy"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "dev"
      when: manual
      variables:
        TASK: "proxyTest"
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "sit"
      when: manual
      variables:
        TASK: "proxyTest"
    - if: $CI_PIPELINE_SOURCE == "web" && $ENV == "prod"
      when: manual
      variables:
        TASK: "proxyTest"
    - when: never
  allow_failure: true

##################### MarketPlace #####################

test_mp_contract_sit:
  extends: .test_run
  stage: test
  variables:
    REPORT_URL: "build/reports_e2e"
    HISTORY_URL: "history_e2e"
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline" && $ENV == "sit" && $TASK_CM == "e2eTestsUiContract"
    - when: never
  allow_failure: true

##################### Instruments #####################
zephyr_link:
  stage: instrumental
  script:
    - chown gradle:gradle ./ -R
    - gradle zephyrLinkTaskNS -Penv=$ENV  -Ptest_cycle=$CYCLE
    - gradle --stop
  when: manual
  allow_failure: true

zephyr_sync:
  stage: instrumental
  script:
    - chown gradle:gradle ./ -R
    - gradle zephyrSyncTaskNS -Penv=$ENV  -Ptest_cycle=$CYCLE
    - gradle --stop
  when: manual
  allow_failure: true


#pages:
#  stage: pages
#  rules:
#    - if: $TASK_NS || $TASK_CM
#      when: always
#    - when: never
#  script:
#    - echo "Generate page with url ${CI_PAGES_URL}"
#    - mkdir .public
#    - cp -v index.html .public
#    - if [ -d "build/reports_ns" ]; then
#    - echo "copy NS report to pages"
#    - mkdir -p .public/nsDeployReport
#    - cp -TRv build/reports_ns/ .public/nsDeployReport/ > /dev/null
#    - fi
#    - if [ -d "build/reports_cm" ]; then
#    - echo "copy CM report to pages"
#    - mkdir -p .public/cmDeployReport
#    - cp -TRv build/reports_cm/ .public/cmDeployReport/ > /dev/null
#    - fi
#    - if [ -d "build/reports_e2e" ]; then
#    - echo "copy e2e report to pages"
#    - mkdir -p .public/e2eDeployReport
#    - cp -TRv build/reports_e2e/ .public/e2eDeployReport/ > /dev/null
#    - fi
#    - mv .public public
#  artifacts:
#    paths:
#      - public
#    expire_in: 5 days
