def targetEnv = System.getenv("CI_ENVIRONMENT_SLUG")
def finalEnv = "dev"
def dynamicEnvUrl = System.getenv("DYNAMIC_ENV_URL")
if(targetEnv != null && !targetEnv.isEmpty()) {
    finalEnv = targetEnv
    println "Receive env from CI_ENVIRONMENT_SLUG ${targetEnv}"
} else {
    finalEnv = hasProperty('env') ? env : 'dev'
}
def allure_project = null



class TestNS extends Test {
    TestNS() {
        group "ns tests"

        maxParallelForks = 20

        forkEvery = 20
        minHeapSize = "16m"
        maxHeapSize = "64m"
        
        useJUnitPlatform {
            includeTags "neutral_server"
        }

        systemProperties = [
                "allure.results.directory": "build/ns/allure-results",
                "allure.report.directory" : "build/ns/allure-report"
        ]
        if (System.properties.containsKey('jira_sync')) {
            def login = System.getProperty("jira_login") ?: jira_login_default
            def pass = System.getProperty("jira_pass") ?: jira_pass_default
            def cycle = System.getProperty("test_cycle") ?: test_cycle_default
            systemProperty "jira_login", login
            systemProperty "jira_pass", pass
            systemProperty "test_cycle", cycle
        }

        systemProperties = [
                "stg.access.key.id"     : System.getenv("ACCESS_KEY_ID_STG"),
                "stg.access.key.secret" : System.getenv("ACCESS_KEY_SECRET_STG"),
                "prod.access.key.id"    : System.getenv("ACCESS_KEY_ID_PROD"),
                "prod.access.key.secret": System.getenv("ACCESS_KEY_SECRET_PROD"),
        ]

        finalizedBy "cleanUpNS", "allurePushReportNS"
    }
}

ext {
    jira_login_default = "svc-ns-bot"
    jira_pass_default = "HtSUxXwdb2aoVfkLfvAoMbPV"
    test_cycle_default = "latest"
}

task initTokensNS(type: JavaExec) {
    logging.captureStandardOutput(LogLevel.QUIET)

    systemProperty "env", finalEnv
    classpath sourceSets.main.runtimeClasspath
    main = "com.here.platform.ns.common.DataPreparationNS"
}

task testDataGeneration(type: JavaExec) {
    onlyIf { !System.getenv("hot_deploy") }
    logging.captureStandardOutput(LogLevel.QUIET)
    systemProperties = [
            "stg.access.key.id"     : System.getenv("ACCESS_KEY_ID_STG"),
            "stg.access.key.secret" : System.getenv("ACCESS_KEY_SECRET_STG"),
            "prod.access.key.id"    : System.getenv("ACCESS_KEY_ID_PROD"),
            "prod.access.key.secret": System.getenv("ACCESS_KEY_SECRET_PROD")
    ]
    doFirst {
        if (!dynamicEnvUrl) {
            println "Use regular env url: $finalEnv"
            systemProperty "env", finalEnv
        } else {
            println "Will be used dynamic url: $finalEnv"
            systemProperty "dynamicUrl", dynamicEnvUrl
            systemProperty "env", "dev"
        }
    }
    classpath sourceSets.main.runtimeClasspath
    main = "com.here.platform.common.TestDataGeneration"
}

task cleanUpNS(type: JavaExec) {
    logging.captureStandardOutput(LogLevel.QUIET)

    systemProperty "env", finalEnv
    classpath sourceSets.main.runtimeClasspath
    main = "com.here.platform.ns.common.DataCleanUpNS"
}

task nsTestRegression(type: TestNS, dependsOn: "initTokensNS") {
    dependsOn "testDataGeneration"
    group "ns tests"
    doFirst {
        systemProperty "env", finalEnv
        allure_project = "neutral-server-${finalEnv}"
    }

    useJUnitPlatform {
        includeTags "neutral_server"
        excludeTags "ignored", "ignored-$finalEnv", "consent_management"
    }
    finalizedBy cleanUpNS
}

task nsTestsSmoke(type: TestNS, dependsOn: "initTokensNS") {
    dependsOn "testDataGeneration"
    group "ns tests"
    doFirst {
        systemProperty "env", finalEnv
        allure_project = "neutral-server-${finalEnv}"
    }
    useJUnitPlatform {
        includeTags "smoke_ns"
        excludeTags "ignored", "ignored-$finalEnv", "consent_management"
    }
}

task nsTestProd(type: TestNS, dependsOn: "initTokensNS") {
    group "ns tests"
    doFirst {
        systemProperty "env", finalEnv
        allure_project = "neutral-server-${finalEnv}"
    }
    useJUnitPlatform {
        includeTags "prod"
        excludeTags "ignored", "ignored-$finalEnv", "consent_management"
    }
}

task allureAggregatedReportNS {
    doFirst {
        copy {
            description 'Copies env variables to report'
            println "Copy env prop from $rootDir/build/tmp/environment.properties to ${allure.resultsDir.absolutePath}/environment.properties"
            from "$rootDir/build/tmp/environment.properties"
            into "${allure.resultsDir.absolutePath}"
        }
    }
    finalizedBy 'allureReport'
}

def getDate() {
    return new Date().format('dd-MM-yyyy')
}

task zephyrLinkTaskNS(type: JavaExec) {
    doFirst {

        def cycleValue = hasProperty('test_cycle') ? test_cycle : "${getDate()}-testing-cycle"
        def folderValue = 'ExtSvcProxy_PROD'

        println "Current user and service: $jira_login $cycleValue"
        args = [
                "--username=${jira_login}", "--password=${jira_pass}", "--reportType=allure", "--projectKey=NS",
                "--releaseVersion=${folderValue}",
                "--testCycle=${cycleValue}",
                "--jiraUrl=https://saeljira.it.here.com/rest/",
                "--reportPath=build/allure-results/",
                "--autoCreateTestCycle=true"
        ]
    }
    main = "com.here.platform.ns.instruments.ZephyrothLinker"
    description = "Run NS Link test results into Zephyr test cycle"
    classpath sourceSets.main.runtimeClasspath
}

task zephyrSyncTaskNS(type: JavaExec) {
    doFirst {

        def cycleValue = hasProperty('test_cycle') ? test_cycle : "${getDate()}-testing-cycle"
        def folderValue = 'Roshen_2.29.0'

        println "Current user and service: $jira_login $cycleValue"
        args = [
                "--username=${jira_login}", "--password=${jira_pass}", "--reportType=allure", "--projectKey=NS",
                "--releaseVersion=${folderValue}",
                "--testCycle=${cycleValue}",
                "--jiraUrl=https://saeljira.it.here.com/rest/",
                "--reportPath=build/allure-results/",
                "--autoCreateTestCycle=true"
        ]
    }
    main = "com.here.platform.ns.instruments.ZephyrothSyncer"
    description = "Run NS Sync test results into Zephyr test cycle"
    classpath sourceSets.main.runtimeClasspath
}

task allurePushReportNS(type: JavaExec) {
    doFirst {
        systemProperty "env", finalEnv
        systemProperty "allure_project", allure_project
    }
    classpath sourceSets.main.runtimeClasspath
    main = "com.here.platform.common.allureSync.AllureReportExport"
}
