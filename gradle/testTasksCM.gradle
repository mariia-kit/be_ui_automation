class TestCM extends Test {
    TestCM() {
        group "cm tests"

        ignoreFailures = false

        minHeapSize = '32m'
        maxHeapSize = '256m'
        maxParallelForks = 20
        forkEvery = 20

        useJUnitPlatform() {
            excludeTags "neutral_server", "e2e", "smoke_cm", "ui"
        }
        systemProperties = [
                "stg.access.key.id"     : System.getenv("ACCESS_KEY_ID_STG"),
                "stg.access.key.secret" : System.getenv("ACCESS_KEY_SECRET_STG"),
                "prod.access.key.id"    : System.getenv("ACCESS_KEY_ID_PROD"),
                "prod.access.key.secret": System.getenv("ACCESS_KEY_SECRET_PROD"),
        ]

        def dynamicEnvUrl = System.getenv("DYNAMIC_ENV_URL")

        finalizedBy "allurePushReport"
    }
}

ext {
    jira_login = "svc-ns-bot"
    jira_pass = "HtSUxXwdb2aoVfkLfvAoMbPV"
}

boolean isHotDeploy = System.getenv("hot_deploy")
def allure_project = null
def targetEnv = System.getenv("CI_ENVIRONMENT_SLUG")
def dynamicEnvUrl = System.getenv("DYNAMIC_ENV_URL")
println "DYNAMIC_ENV_URL = ${dynamicEnvUrl}"
println "CI_ENVIRONMENT_SLUG = ${targetEnv}"
def finalEnv = "dev"
if (targetEnv != null && !targetEnv.isEmpty()) {
    finalEnv = targetEnv
    println "Receive env from CI_ENVIRONMENT_SLUG ${targetEnv}"
} else {
    finalEnv = hasProperty('env') ? env : 'dev'
    println "Receive env from property ${finalEnv}"

}


println "Run script for CM env >>>>> ${finalEnv}"

task smokeCMTests(type: TestCM) {
    failFast true
    doFirst {
        if (!dynamicEnvUrl) {
            systemProperty "env", finalEnv
        } else {
            println "Will be used dynamic url: $finalEnv"
            systemProperty "dynamicUrl", dynamicEnvUrl
            allure_project = "rest-service-dynamic"
            systemProperty "env", "dev"
        }
    }

    useJUnitPlatform {
        includeTags "smoke_cm"
    }
    
    dependsOn "cleanUpCM"
}

task fePreDevTests(type: TestCM) {
    doFirst {
        def dynamicUIUrl = System.getenv("DYNAMIC_ENV_URL")

        println "Will be used dynamic url: $dynamicEnvUrl"
        println "Will be used dynamic ui url: $dynamicUIUrl"

        systemProperty "dynamicUrl", dynamicEnvUrl
        systemProperty "env", "dev"
        allure_project = "consent-web-client-dynamic"
    }
    useJUnitPlatform {
        includeTags "dynamic_ui"
    }

    dependsOn "cleanUpCM"
}

task feTests(type: TestCM) {
    onlyIf { !isHotDeploy }
    doFirst {
        systemProperty "env", finalEnv
        def feEnv = finalEnv.equals("prod") ? "prd" : finalEnv
        allure_project = "consent-web-client-${feEnv}"
    }
    useJUnitPlatform {
        includeTags "ui"
    }
}

task userAccount(type: TestCM) {
    onlyIf { !isHotDeploy }

    systemProperty "env", finalEnv
    useJUnitPlatform {
        includeTags "userAccount"
        excludeTags "ui"
    }
}

task uiTests(type: TestCM) {
    onlyIf { !isHotDeploy }
    systemProperty "env", finalEnv
    useJUnitPlatform {
        includeTags "ui"
    }
}

task devTests(type: TestCM, dependsOn: "smokeCMTests") {
    onlyIf { !isHotDeploy }
    doFirst {
        systemProperty "env", "dev"
        allure_project = "rest-service-dev"
    }
    finalizedBy "uiTests"
}

task sitTests(type: TestCM, dependsOn: "smokeCMTests") {
    onlyIf { !isHotDeploy }
    doFirst {
        systemProperty "env", "sit"
        systemProperty "jira_sync", "true"
        allure_project = "rest-service-sit"
    }
    finalizedBy "uiTests"
}

task prodTests(type: TestCM) {
    group "cm tests"
    doFirst {
        systemProperty "env", "prod"
        allure_project = "rest-service-prod"
    }
    useJUnitPlatform {
        includeTags "cm_prod"
    }
}

task fabricTests(type: TestCM) {
    group "cm tests"
    doFirst {
        systemProperty "env", finalEnv
        def externalService = System.getenv("SERVICE")
        def finalService = externalService != null ? externalService : "hyperledger"
        allure_project = "${finalService}-${finalEnv}"
    }
    useJUnitPlatform {
        includeTags "fabric_test"
    }

}

task cleanUpCM(type: JavaExec) {
    logging.captureStandardOutput(LogLevel.QUIET)

    systemProperty "env", finalEnv
    classpath sourceSets.main.runtimeClasspath
    main = "com.here.platform.common.CMDataCleanUp"
}

task allurePushReport(type: JavaExec) {
    doFirst {
        systemProperty "env", finalEnv
        systemProperty "allure_project", allure_project
    }
    classpath sourceSets.main.runtimeClasspath
    main = "com.here.platform.common.allureSync.AllureReportExport"
}

task allureAggregatedReportCM {
    finalizedBy 'allureReport'
}

