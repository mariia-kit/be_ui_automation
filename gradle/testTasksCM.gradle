class TestCM extends Test {
    TestCM() {
        group "cm tests"

        ignoreFailures = false

        minHeapSize = '32m'
        maxHeapSize = '256m'
        maxParallelForks = 20
        forkEvery = 20

        useJUnitPlatform() {
            excludeTags "neutral_server", "e2e", "smoke_cm", "ui", "userAccount"
        }

        systemProperties = [
                "stg.access.key.id"     : System.getenv("ACCESS_KEY_ID_STG"),
                "stg.access.key.secret" : System.getenv("ACCESS_KEY_SECRET_STG"),
                "prod.access.key.id"    : System.getenv("ACCESS_KEY_ID_PROD"),
                "prod.access.key.secret": System.getenv("ACCESS_KEY_SECRET_PROD"),
        ]

        def dynamicEnvUrl = System.getenv("DYNAMIC_ENV_URL")
        if (!dynamicEnvUrl) finalizedBy "allureAggregatedReportCM"
    }
}

ext {
    jira_login = "svc-ns-bot"
    jira_pass = "HtSUxXwdb2aoVfkLfvAoMbPV"
}

boolean isHotDeploy = System.getenv("hot_deploy")

def targetEnv = System.getenv("CI_ENVIRONMENT_SLUG")
def dynamicEnvUrl = System.getenv("DYNAMIC_ENV_URL")
def finalEnv = "dev"
if (targetEnv != null && !targetEnv.isEmpty()) {
    finalEnv = targetEnv
    println "Receive env from CI_ENVIRONMENT_SLUG ${targetEnv}"
} else {
    finalEnv = hasProperty('env') ? env : 'dev'
    println "Receive env from property ${finalEnv}"
}

println "Run script for CM env >>>>> ${finalEnv}"

task smokeCMTests(type: TestCM) {
    failFast true
    //todo add execution for all tests except Sentry checkers

    if (!dynamicEnvUrl) {
        systemProperty "env", finalEnv
    } else {
        println "Will be used dynamic url: $finalEnv"
        systemProperty "dynamicUrl", dynamicEnvUrl
        systemProperty "env", "dev"
    }
    useJUnitPlatform {
        includeTags "smoke_cm"
    }
    
    dependsOn "cleanUpCM"
}

task fePreDevTests(type: TestCM) {
    def dynamicUIUrl = System.getenv("DYNAMIC_ENV_URL")
    
    println "Will be used dynamic url: $dynamicEnvUrl"
    println "Will be used dynamic ui url: $dynamicUIUrl"
    
    maxParallelForks = 1
    forkEvery = 0
    
    systemProperty "dynamicUrl", dynamicEnvUrl
    systemProperty "env", "dev"
    
    useJUnitPlatform {
        includeTags "dynamic_ui"
    }

    dependsOn "cleanUpCM", "testDataGeneration"
    finalizedBy "allureAggregatedReportCM"
}

task userAccount(type: TestCM) {
    onlyIf { !isHotDeploy }

    maxParallelForks = 1
    forkEvery = 0

    systemProperty "env", finalEnv
    useJUnitPlatform {
        includeTags "userAccount"
        excludeTags "ui"
    }
}

task uiTests(type: TestCM) {
    onlyIf { !isHotDeploy }

    maxParallelForks = 1
    forkEvery = 0
    
    systemProperty "env", finalEnv
    useJUnitPlatform {
        includeTags "ui"
    }
}

task devTests(type: TestCM, dependsOn: "smokeCMTests") {
    onlyIf { !isHotDeploy }

    systemProperty "env", "dev"

    finalizedBy "userAccount"//, "uiTests"
}

task sitTests(type: TestCM, dependsOn: "smokeCMTests") {
    onlyIf { !isHotDeploy }

    systemProperty "env", "sit"
    systemProperty "jira_sync", "true"

    finalizedBy "userAccount"//, "uiTests"
}

task prodTests(type: TestCM) {
    group "cm tests"

    systemProperty "env", "prod"

    useJUnitPlatform {
        includeTags "cm_prod"
    }
}

task fabricTests(type: TestCM) {
    group "cm tests"
    systemProperty "env", finalEnv
    useJUnitPlatform {
        includeTags "fabric_test"
    }
}

task zephyrCMSync(type: JavaExec) {
    main = "com.here.platform.ns.instruments.Zephyroth"
    description = "Run Sync test results into Zephyr test cycle"
    classpath sourceSets.main.runtimeClasspath

    def serviceName = System.getProperty('SERVICE') ?: 'null'
    def serviceVersion = System.getProperty('IMAGE_TAG') ?: 'null'

    def cycleValue = "$serviceName:$serviceVersion"

    if (cycleValue == "null:null") {
        cycleValue = "CM:latest"
    }

    println "Current user and service: $jira_login $cycleValue"
    args = [
            "--username=${jira_login}", "--password=${jira_pass}",
            "--reportType=allure", "--projectKey=NS",
            "--releaseVersion=NSPOSTMVP",
            "--testCycle=${cycleValue}",
            "--jiraUrl=https://saeljira.it.here.com/rest/",
            "--reportPath=build/allure-results/",
            "--autoCreateTestCycle=true"
    ]
}

task cleanUpCM(type: JavaExec) {
    logging.captureStandardOutput(LogLevel.QUIET)

    systemProperty "env", finalEnv
    classpath sourceSets.main.runtimeClasspath
    main = "com.here.platform.common.CMDataCleanUp"
}

task copyHistoryCM(type: Copy) {
    description 'Copies the new CM history directory to folder to store.'
    println "Copy local history_ns to $rootDir/history_cm"
    from "${allure.reportDir.absolutePath}/history"
    into "$rootDir/history_cm"

    shouldRunAfter 'allureReport'
}

task allureAggregatedReportCM {
    doFirst {
        copy {
            description 'Copies the old history directory to the current test run data.'
            println "Copy global history to ${allure.resultsDir.absolutePath}/history"
            mkdir "${allure.resultsDir.absolutePath}/history"
            from "$rootDir/history_cm"
            into "${allure.resultsDir.absolutePath}/history"
        }
    }
    finalizedBy 'allureReport', 'copyHistoryCM'
}
