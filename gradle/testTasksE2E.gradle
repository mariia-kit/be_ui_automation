def targetEnv = System.getenv("CI_ENVIRONMENT_SLUG")
def finalEnv = "dev"
if(targetEnv != null && !targetEnv.isEmpty()) {
    finalEnv = targetEnv
    println "Receive env from CI_ENVIRONMENT_SLUG ${targetEnv}"
} else {
    finalEnv = hasProperty('env') ? env : 'dev'
    println "Receive env from property ${finalEnv}"
}

println "Run script for E2E env >>>>> ${finalEnv}"

class TestE2E extends Test {
    TestE2E() {
        group "e2e tests"

        maxParallelForks = 32
        forkEvery = 20
        minHeapSize = "32m"
        maxHeapSize = "254m"
        
        if (System.properties.containsKey('jira_sync')) {
            def login = System.getProperty("jira_login") ?: jira_login_default
            def pass = System.getProperty("jira_pass") ?: jira_pass_default
            def cycle = System.getProperty("test_cycle") ?: test_cycle_default
            systemProperty "jira_login", login
            systemProperty "jira_pass", pass
            systemProperty "test_cycle", cycle
        }

        finalizedBy "allureAggregatedReportE2E", "cleanUpNS"
    }
}

ext {
    jira_login_default = "svc-ns-bot"
    jira_pass_default = "HtSUxXwdb2aoVfkLfvAoMbPV"
    test_cycle_default = "latest"
}

task e2eTests(type: TestE2E, dependsOn: "initTokensNS") {
    dependsOn "testDataGeneration"
    group "e2e tests"
    systemProperty "env", finalEnv
    useJUnitPlatform {
        includeTags "e2e"
        excludeTags "e2e_ui", "ignored", "ignored-$finalEnv", "consent_management"
    }
}

task e2eTestsUI(type: TestE2E, dependsOn: "initTokensNS") {
    dependsOn "testDataGeneration"
    group "e2e tests"
    systemProperty "env", finalEnv
    useJUnitPlatform {
        includeTags "e2e_ui"
        excludeTags "ignored", "ignored-$finalEnv", "consent_management"
    }
}

task e2eProdTests(type: TestE2E) {
    group "e2e tests"
    systemProperty "env", "prod"
    useJUnitPlatform {
        includeTags "e2e_prod"
    }
}

task allureAggregatedReportE2E {
    finalizedBy 'allureReport'
}