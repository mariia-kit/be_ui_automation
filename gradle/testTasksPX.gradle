class TestPX extends Test {
    TestPX() {
        group "proxy tests"

        ignoreFailures = false

        minHeapSize = '32m'
        maxHeapSize = '256m'
        maxParallelForks = 20
        forkEvery = 20

        systemProperties = [
                "stg.access.key.id"     : System.getenv("ACCESS_KEY_ID_STG"),
                "stg.access.key.secret" : System.getenv("ACCESS_KEY_SECRET_STG"),
                "prod.access.key.id"    : System.getenv("ACCESS_KEY_ID_PROD"),
                "prod.access.key.secret": System.getenv("ACCESS_KEY_SECRET_PROD"),
        ]

        def dynamicEnvUrl = System.getenv("DYNAMIC_ENV_URL")

        finalizedBy "allurePushReportPX"
    }
}

ext {
    jira_login = "svc-ns-bot"
    jira_pass = "HtSUxXwdb2aoVfkLfvAoMbPV"
}

def allure_project = null
def targetEnv = System.getenv("CI_ENVIRONMENT_SLUG")
def dynamicEnvUrl = System.getenv("DYNAMIC_ENV_URL")
println "DYNAMIC_ENV_URL = ${dynamicEnvUrl}"
println "CI_ENVIRONMENT_SLUG = ${targetEnv}"
def finalEnv = "dev"
if (targetEnv != null && !targetEnv.isEmpty()) {
    finalEnv = targetEnv
    println "Receive env from CI_ENVIRONMENT_SLUG ${targetEnv}"
} else {
    finalEnv = hasProperty('env') ? env : 'dev'
    println "Receive env from property ${finalEnv}"

}


task proxyTest(type: TestPX) {
    doFirst {
        systemProperty "env", finalEnv
        allure_project = "external-proxy-${finalEnv}"
    }
    useJUnitPlatform {
        includeTags "proxy"
    }
}

task allurePushReportPX(type: JavaExec) {
    doFirst {
        systemProperty "env", finalEnv
        systemProperty "allure_project", allure_project
    }
    classpath sourceSets.main.runtimeClasspath
    main = "com.here.platform.common.allureSync.AllureReportExport"
}